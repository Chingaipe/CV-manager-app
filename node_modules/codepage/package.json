{
  "_args": [
    [
      {
        "raw": "codepage@~1.10.1",
        "scope": null,
        "escapedName": "codepage",
        "name": "codepage",
        "rawSpec": "~1.10.1",
        "spec": ">=1.10.1 <1.11.0",
        "type": "range"
      },
      "E:\\codes\\Web\\CV-manager-app\\node_modules\\xlsx"
    ]
  ],
  "_from": "codepage@>=1.10.1 <1.11.0",
  "_id": "codepage@1.10.2",
  "_inCache": true,
  "_location": "/codepage",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/codepage-1.10.2.tgz_1501636140417_0.1593100808095187"
  },
  "_npmUser": {
    "name": "sheetjs",
    "email": "dev@sheetjs.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "codepage@~1.10.1",
    "scope": null,
    "escapedName": "codepage",
    "name": "codepage",
    "rawSpec": "~1.10.1",
    "spec": ">=1.10.1 <1.11.0",
    "type": "range"
  },
  "_requiredBy": [
    "/xlsx"
  ],
  "_resolved": "https://registry.npmjs.org/codepage/-/codepage-1.10.2.tgz",
  "_shasum": "bebd25224dc626a0007ea014e076ce057374769e",
  "_shrinkwrap": null,
  "_spec": "codepage@~1.10.1",
  "_where": "E:\\codes\\Web\\CV-manager-app\\node_modules\\xlsx",
  "author": {
    "name": "SheetJS"
  },
  "bin": {
    "codepage": "./bin/codepage.njs"
  },
  "bugs": {
    "url": "https://github.com/SheetJS/js-codepage/issues"
  },
  "config": {
    "blanket": {
      "pattern": "[cputils.js]"
    }
  },
  "dependencies": {
    "commander": "~2.11.0",
    "exit-on-epipe": "~1.0.1",
    "voc": "~1.0.0"
  },
  "description": "pure-JS library to handle codepages",
  "devDependencies": {
    "mocha": "~2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "bebd25224dc626a0007ea014e076ce057374769e",
    "tarball": "https://registry.npmjs.org/codepage/-/codepage-1.10.2.tgz"
  },
  "engines": {
    "node": ">=0.8"
  },
  "files": [
    "LICENSE",
    "README.md",
    "bin",
    "cptable.js",
    "cputils.js",
    "dist/cpexcel.full.js"
  ],
  "homepage": "https://github.com/SheetJS/js-codepage#readme",
  "keywords": [
    "codepage",
    "iconv",
    "convert",
    "strings"
  ],
  "license": "Apache-2.0",
  "main": "cputils.js",
  "maintainers": [
    {
      "name": "sheetjs",
      "email": "dev@sheetjs.com"
    }
  ],
  "name": "codepage",
  "optionalDependencies": {},
  "readme": "# js-codepage\n\n[Codepages](https://en.wikipedia.org/wiki/Codepage) are character encodings.  In\nmany contexts, single- or double-byte character sets are used in lieu of Unicode\nencodings.  The codepages map between characters and numbers.\n\n## Setup\n\nIn node:\n\n```js\nvar cptable = require('codepage');\n```\n\nIn the browser:\n\n```html\n<script src=\"cptable.js\"></script>\n<script src=\"cputils.js\"></script>\n```\n\nAlternatively, use the full version in the dist folder:\n\n```html\n<script src=\"cptable.full.js\"></script>\n```\n\nThe complete set of codepages is large due to some Double Byte Character Set\nencodings.  A much smaller file that just includes SBCS codepages is provided in\nthis repo (`sbcs.js`), as well as a file for other projects (`cpexcel.js`)\n\nIf you know which codepages you need, you can include individual scripts for\neach codepage.  The individual files are provided in the `bits/` directory.\nFor example, to include only the Mac codepages:\n\n```html\n<script src=\"bits/10000.js\"></script>\n<script src=\"bits/10006.js\"></script>\n<script src=\"bits/10007.js\"></script>\n<script src=\"bits/10029.js\"></script>\n<script src=\"bits/10079.js\"></script>\n<script src=\"bits/10081.js\"></script>\n```\n\nAll of the browser scripts define and append to the `cptable` object.  To rename\nthe object, edit the `JSVAR` shell variable in `make.sh` and run the script.\n\nThe utilities functions are contained in `cputils.js`, which assumes that the\nappropriate codepage scripts were loaded.\n\n## Usage\n\nMost codepages are indexed by number.  To get the unicode character for a given\ncodepoint, use the `dec` property:\n\n```js\nvar unicode_cp10000_255 = cptable[10000].dec[255]; // Àá\n```\n\nTo get the codepoint for a given character, use the `enc` property:\n\n```js\nvar cp10000_711 = cptable[10000].enc[String.fromCharCode(711)]; // 255\n```\n\nThere are a few utilities that deal with strings and buffers:\n\n```js\nvar Ê±áÊÄª = cptable.utils.decode(936, [0xbb,0xe3,0xd7,0xdc]);\nvar buf =  cptable.utils.encode(936,  Ê±áÊÄª);\nvar sushi= cptable.utils.decode(65001, [0xf0,0x9f,0x8d,0xa3]); // üç£\nvar sbuf = cptable.utils.encode(65001, sushi);\n```\n\n`cptable.utils.encode(CP, data, ofmt)` accepts a String or Array of characters\nand returns a representation controlled by `ofmt`:\n\n- Default output is a Buffer (or Array) of bytes (integers between 0 and 255).\n- If `ofmt == 'str'`, return a String where `o.charCodeAt(i)` is the `i`-th byte\n- If `ofmt == 'arr'`, return an Array of bytes\n\n`cptable.utils.decode(CP, data)` accepts a byte String or Array of numbers or\nBuffer and returns a JS string.\n\n## Known Excel Codepages\n\nA much smaller script, including only the codepages known to be used in Excel,\nis available under the name `cpexcel`.  It exposes the same variable `cptable`\nand is suitable as a drop-in replacement when the full codepage tables are not\nneeded.\n\nIn node:\n\n```js\nvar cptable = require('codepage/dist/cpexcel.full');\n```\n\n## Rolling your own script\n\nThe `make.sh` script in the repo can take a manifest and generate JS source.\n\nUsage:\n\n```bash\n$ bash make.sh path_to_manifest output_file_name JSVAR\n```\n\nwhere\n\n- `JSVAR` is the name of the exported variable (generally `cptable`)\n- `output_file_name` is the output file (e.g. `cpexcel.js`, `cptable.js`)\n- `path_to_manifest` is the path to the manifest file.\n\nThe manifest file is expected to be a CSV with 3 columns:\n\n```\n<codepage number>,<source>,<size>\n```\n\nIf a source is specified, it will try to download the specified file and parse.\nThe file format is expected to follow the format from the unicode.org site.\nThe size should be `1` for a single-byte codepage and `2` for a double-byte\ncodepage.  For mixed codepages (which use some single- and some double-byte\ncodes), the script assumes the mapping is a prefix code and generates efficient\nJS code.\n\nGenerated scripts only include the mapping.  `cat` a mapping with `cputils.js`\nto produce a complete script like `cpexcel.full.js`.\n\n## Building the complete script\n\nThis script uses [voc](npm.im/voc).  The script to build the codepage tables and\nthe JS source is `codepage.md`, so building is as simple as `voc codepage.md`.\n\n## Generated Codepages\n\nThe complete list of hardcoded codepages can be found in the file `pages.csv`.\n\nSome codepages are easier to implement algorithmically.  Since these are\nhardcoded in `utils`, there is no corresponding entry (they are \"magic\").\n\n|   CP#   |   Source    | Description                                          |\n|--------:|:-----------:|:-----------------------------------------------------|\n| `   37` | unicode.org | IBM EBCDIC US-Canada                                 |\n| `  437` | unicode.org | OEM United States                                    |\n| `  500` | unicode.org | IBM EBCDIC International                             |\n| `  620` |     NLS     | Mazovia (Polish) MS-DOS                              |\n| `  708` |  Windows 7  | Arabic (ASMO 708)                                    |\n| `  720` |  Windows 7  | Arabic (Transparent ASMO); Arabic (DOS)              |\n| `  737` | unicode.org | OEM Greek (formerly 437G); Greek (DOS)               |\n| `  775` | unicode.org | OEM Baltic; Baltic (DOS)                             |\n| `  808` | unicode.org | OEM Russian; Cyrillic + Euro symbol                  |\n| `  850` | unicode.org | OEM Multilingual Latin 1; Western European (DOS)     |\n| `  852` | unicode.org | OEM Latin 2; Central European (DOS)                  |\n| `  855` | unicode.org | OEM Cyrillic (primarily Russian)                     |\n| `  857` | unicode.org | OEM Turkish; Turkish (DOS)                           |\n| `  858` |  Windows 7  | OEM Multilingual Latin 1 + Euro symbol               |\n| `  860` | unicode.org | OEM Portuguese; Portuguese (DOS)                     |\n| `  861` | unicode.org | OEM Icelandic; Icelandic (DOS)                       |\n| `  862` | unicode.org | OEM Hebrew; Hebrew (DOS)                             |\n| `  863` | unicode.org | OEM French Canadian; French Canadian (DOS)           |\n| `  864` | unicode.org | OEM Arabic; Arabic (864)                             |\n| `  865` | unicode.org | OEM Nordic; Nordic (DOS)                             |\n| `  866` | unicode.org | OEM Russian; Cyrillic (DOS)                          |\n| `  869` | unicode.org | OEM Modern Greek; Greek, Modern (DOS)                |\n| `  870` |  Windows 7  | IBM EBCDIC Multilingual/ROECE (Latin 2)              |\n| `  872` | unicode.org | OEM Cyrillic (primarily Russian) + Euro Symbol       |\n| `  874` | unicode.org | Windows Thai                                         |\n| `  875` | unicode.org | IBM EBCDIC Greek Modern                              |\n| `  895` |     NLS     | Kamenick√Ω (Czech) MS-DOS                             |\n| `  932` | unicode.org | Japanese Shift-JIS                                   |\n| `  936` | unicode.org | Simplified Chinese GBK                               |\n| `  949` | unicode.org | Korean                                               |\n| `  950` | unicode.org | Traditional Chinese Big5                             |\n| ` 1010` |     IBM     | IBM EBCDIC French                                    |\n| ` 1026` | unicode.org | IBM EBCDIC Turkish (Latin 5)                         |\n| ` 1047` |  Windows 7  | IBM EBCDIC Latin 1/Open System                       |\n| ` 1132` |     IBM     | IBM EBCDIC Lao (1132 / 1133 / 1341)                  |\n| ` 1140` |  Windows 7  | IBM EBCDIC US-Canada (037 + Euro symbol)             |\n| ` 1141` |  Windows 7  | IBM EBCDIC Germany (20273 + Euro symbol)             |\n| ` 1142` |  Windows 7  | IBM EBCDIC Denmark-Norway (20277 + Euro symbol)      |\n| ` 1143` |  Windows 7  | IBM EBCDIC Finland-Sweden (20278 + Euro symbol)      |\n| ` 1144` |  Windows 7  | IBM EBCDIC Italy (20280 + Euro symbol)               |\n| ` 1145` |  Windows 7  | IBM EBCDIC Latin America-Spain (20284 + Euro symbol) |\n| ` 1146` |  Windows 7  | IBM EBCDIC United Kingdom (20285 + Euro symbol)      |\n| ` 1147` |  Windows 7  | IBM EBCDIC France (20297 + Euro symbol)              |\n| ` 1148` |  Windows 7  | IBM EBCDIC International (500 + Euro symbol)         |\n| ` 1149` |  Windows 7  | IBM EBCDIC Icelandic (20871 + Euro symbol)           |\n| ` 1200` |    magic    | Unicode UTF-16, little endian (BMP of ISO 10646)     |\n| ` 1201` |    magic    | Unicode UTF-16, big endian                           |\n| ` 1250` | unicode.org | Windows Central Europe                               |\n| ` 1251` | unicode.org | Windows Cyrillic                                     |\n| ` 1252` | unicode.org | Windows Latin I                                      |\n| ` 1253` | unicode.org | Windows Greek                                        |\n| ` 1254` | unicode.org | Windows Turkish                                      |\n| ` 1255` | unicode.org | Windows Hebrew                                       |\n| ` 1256` | unicode.org | Windows Arabic                                       |\n| ` 1257` | unicode.org | Windows Baltic                                       |\n| ` 1258` | unicode.org | Windows Vietnam                                      |\n| ` 1361` |  Windows 7  | Korean (Johab)                                       |\n| `10000` | unicode.org | MAC Roman                                            |\n| `10001` |  Windows 7  | Japanese (Mac)                                       |\n| `10002` |  Windows 7  | MAC Traditional Chinese (Big5)                       |\n| `10003` |  Windows 7  | Korean (Mac)                                         |\n| `10004` |  Windows 7  | Arabic (Mac)                                         |\n| `10005` |  Windows 7  | Hebrew (Mac)                                         |\n| `10006` | unicode.org | Greek (Mac)                                          |\n| `10007` | unicode.org | Cyrillic (Mac)                                       |\n| `10008` |  Windows 7  | MAC Simplified Chinese (GB 2312)                     |\n| `10010` |  Windows 7  | Romanian (Mac)                                       |\n| `10017` |  Windows 7  | Ukrainian (Mac)                                      |\n| `10021` |  Windows 7  | Thai (Mac)                                           |\n| `10029` | unicode.org | MAC Latin 2 (Central European)                       |\n| `10079` | unicode.org | Icelandic (Mac)                                      |\n| `10081` | unicode.org | Turkish (Mac)                                        |\n| `10082` |  Windows 7  | Croatian (Mac)                                       |\n| `12000` |    magic    | Unicode UTF-32, little endian byte order             |\n| `12001` |    magic    | Unicode UTF-32, big endian byte order                |\n| `20000` |  Windows 7  | CNS Taiwan (Chinese Traditional)                     |\n| `20001` |  Windows 7  | TCA Taiwan                                           |\n| `20002` |  Windows 7  | Eten Taiwan (Chinese Traditional)                    |\n| `20003` |  Windows 7  | IBM5550 Taiwan                                       |\n| `20004` |  Windows 7  | TeleText Taiwan                                      |\n| `20005` |  Windows 7  | Wang Taiwan                                          |\n| `20105` |  Windows 7  | Western European IA5 (IRV International Alphabet 5)  |\n| `20106` |  Windows 7  | IA5 German (7-bit)                                   |\n| `20107` |  Windows 7  | IA5 Swedish (7-bit)                                  |\n| `20108` |  Windows 7  | IA5 Norwegian (7-bit)                                |\n| `20127` |    magic    | US-ASCII (7-bit)                                     |\n| `20261` |  Windows 7  | T.61                                                 |\n| `20269` |  Windows 7  | ISO 6937 Non-Spacing Accent                          |\n| `20273` |  Windows 7  | IBM EBCDIC Germany                                   |\n| `20277` |  Windows 7  | IBM EBCDIC Denmark-Norway                            |\n| `20278` |  Windows 7  | IBM EBCDIC Finland-Sweden                            |\n| `20280` |  Windows 7  | IBM EBCDIC Italy                                     |\n| `20284` |  Windows 7  | IBM EBCDIC Latin America-Spain                       |\n| `20285` |  Windows 7  | IBM EBCDIC United Kingdom                            |\n| `20290` |  Windows 7  | IBM EBCDIC Japanese Katakana Extended                |\n| `20297` |  Windows 7  | IBM EBCDIC France                                    |\n| `20420` |  Windows 7  | IBM EBCDIC Arabic                                    |\n| `20423` |  Windows 7  | IBM EBCDIC Greek                                     |\n| `20424` |  Windows 7  | IBM EBCDIC Hebrew                                    |\n| `20833` |  Windows 7  | IBM EBCDIC Korean Extended                           |\n| `20838` |  Windows 7  | IBM EBCDIC Thai                                      |\n| `20866` |  Windows 7  | Russian Cyrillic (KOI8-R)                            |\n| `20871` |  Windows 7  | IBM EBCDIC Icelandic                                 |\n| `20880` |  Windows 7  | IBM EBCDIC Cyrillic Russian                          |\n| `20905` |  Windows 7  | IBM EBCDIC Turkish                                   |\n| `20924` |  Windows 7  | IBM EBCDIC Latin 1/Open System (1047 + Euro symbol)  |\n| `20932` |  Windows 7  | Japanese (JIS 0208-1990 and 0212-1990)               |\n| `20936` |  Windows 7  | Simplified Chinese (GB2312-80)                       |\n| `20949` |  Windows 7  | Korean Wansung                                       |\n| `21025` |  Windows 7  | IBM EBCDIC Cyrillic Serbian-Bulgarian                |\n| `21027` |     NLS     | Extended/Ext Alpha Lowercase                         |\n| `21866` |  Windows 7  | Ukrainian Cyrillic (KOI8-U)                          |\n| `28591` | unicode.org | ISO 8859-1 Latin 1 (Western European)                |\n| `28592` | unicode.org | ISO 8859-2 Latin 2 (Central European)                |\n| `28593` | unicode.org | ISO 8859-3 Latin 3                                   |\n| `28594` | unicode.org | ISO 8859-4 Baltic                                    |\n| `28595` | unicode.org | ISO 8859-5 Cyrillic                                  |\n| `28596` | unicode.org | ISO 8859-6 Arabic                                    |\n| `28597` | unicode.org | ISO 8859-7 Greek                                     |\n| `28598` | unicode.org | ISO 8859-8 Hebrew (ISO-Visual)                       |\n| `28599` | unicode.org | ISO 8859-9 Turkish                                   |\n| `28600` | unicode.org | ISO 8859-10 Latin 6                                  |\n| `28601` | unicode.org | ISO 8859-11 Latin (Thai)                             |\n| `28603` | unicode.org | ISO 8859-13 Latin 7 (Estonian)                       |\n| `28604` | unicode.org | ISO 8859-14 Latin 8 (Celtic)                         |\n| `28605` | unicode.org | ISO 8859-15 Latin 9                                  |\n| `28606` | unicode.org | ISO 8859-15 Latin 10                                 |\n| `29001` |  Windows 7  | Europa 3                                             |\n| `38598` |  Windows 7  | ISO 8859-8 Hebrew (ISO-Logical)                      |\n| `47451` | unicode.org | Atari ST/TT                                          |\n| `50220` |  Windows 7  | ISO 2022 JIS Japanese with no halfwidth Katakana     |\n| `50221` |  Windows 7  | ISO 2022 JIS Japanese with halfwidth Katakana        |\n| `50222` |  Windows 7  | ISO 2022 Japanese JIS X 0201-1989 (1 byte Kana-SO/SI)|\n| `50225` |  Windows 7  | ISO 2022 Korean                                      |\n| `50227` |  Windows 7  | ISO 2022 Simplified Chinese                          |\n| `51932` |  Windows 7  | EUC Japanese                                         |\n| `51936` |  Windows 7  | EUC Simplified Chinese                               |\n| `51949` |  Windows 7  | EUC Korean                                           |\n| `52936` |  Windows 7  | HZ-GB2312 Simplified Chinese                         |\n| `54936` |  Windows 7  | GB18030 Simplified Chinese (4 byte)                  |\n| `57002` |  Windows 7  | ISCII Devanagari                                     |\n| `57003` |  Windows 7  | ISCII Bengali                                        |\n| `57004` |  Windows 7  | ISCII Tamil                                          |\n| `57005` |  Windows 7  | ISCII Telugu                                         |\n| `57006` |  Windows 7  | ISCII Assamese                                       |\n| `57007` |  Windows 7  | ISCII Oriya                                          |\n| `57008` |  Windows 7  | ISCII Kannada                                        |\n| `57009` |  Windows 7  | ISCII Malayalam                                      |\n| `57010` |  Windows 7  | ISCII Gujarati                                       |\n| `57011` |  Windows 7  | ISCII Punjabi                                        |\n| `65000` |    magic    | Unicode (UTF-7)                                      |\n| `65001` |    magic    | Unicode (UTF-8)                                      |\n\n`unicode.org` refers to the Unicode Consortium Public Mappings, a database of\nvarious mappings between unicode characters and respective character sets.  The\ntables are processed by a few scripts in the build process.\n\n`IBM` refers to the IBM coded character set database.  Even though IBM uses a\ndifferent numbering scheme from Windows, the IBM numbers are used when there is\nno conflict.  The tables are manually generated from the symbol PDFs.\n\n`Windows 7` refers to direct inspection of Windows 7 machines using .NET class\n`System.Text.Encoding`.  The enclosed `MakeEncoding.cs` C# program brute-forces\ncode pages.  MakeEncoding.cs deviates from unicode.org in some cases. When they\nmap a given code to different characters, unicode.org value is used. When\nunicode.org does not prescribe a value, MakeEncoding.cs value is used.\n\n`NLS` refers to the National Language Support files supplied in various versions\nof Windows.  In older versions of Windows (e.g. Windows 98) these files followed\nthe name pattern `CP_#.NLS`, but newer versions use the name pattern `C_#.NLS`.\n\n## Testing\n\n`make test` will run the nodejs-based test.\n\nTo run the in-browser tests, run a local server and go to the `ctest` directory.\n`make ctestserv` will start a python `SimpleHTTPServer` server on port 8000.\n\nTo update the browser artifacts, run `make ctest`.\n\n## Sources\n\n- [Unicode Consortium Public Mappings](http://www.unicode.org/Public/MAPPINGS/)\n- [Windows Code Page Enumeration](http://msdn.microsoft.com/en-us/library/cc195051.aspx)\n- [Windows Code Page Identifiers](http://msdn.microsoft.com/en-us/library/windows/desktop/dd317756.aspx)\n- [IBM Coded Character Sets](https://www-01.ibm.com/software/globalization/ccsid/ccsid_registered.html)\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\n## Badges\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/codepage.svg)](https://saucelabs.com/u/codepage)\n\n[![Build Status](https://travis-ci.org/SheetJS/js-codepage.svg?branch=master)](https://travis-ci.org/SheetJS/js-codepage)\n\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/js-codepage/master.svg)](https://coveralls.io/r/SheetJS/js-codepage?branch=master)\n\n[![Analytics](https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/js-codepage?pixel)](https://github.com/SheetJS/js-codepage)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-codepage.git"
  },
  "scripts": {
    "build": "make js",
    "pretest": "git submodule init && git submodule update",
    "test": "make test"
  },
  "version": "1.10.2"
}
