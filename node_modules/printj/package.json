{
  "_args": [
    [
      {
        "raw": "printj@~1.1.0",
        "scope": null,
        "escapedName": "printj",
        "name": "printj",
        "rawSpec": "~1.1.0",
        "spec": ">=1.1.0 <1.2.0",
        "type": "range"
      },
      "E:\\codes\\Web\\CV-manager-app\\node_modules\\adler-32"
    ]
  ],
  "_from": "printj@>=1.1.0 <1.2.0",
  "_id": "printj@1.1.0",
  "_inCache": true,
  "_location": "/printj",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/printj-1.1.0.tgz_1500839192079_0.6220082517247647"
  },
  "_npmUser": {
    "name": "sheetjs",
    "email": "dev@sheetjs.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "printj@~1.1.0",
    "scope": null,
    "escapedName": "printj",
    "name": "printj",
    "rawSpec": "~1.1.0",
    "spec": ">=1.1.0 <1.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/adler-32",
    "/cfb",
    "/crc-32"
  ],
  "_resolved": "https://registry.npmjs.org/printj/-/printj-1.1.0.tgz",
  "_shasum": "85487b5e8f96763b0b4a253613bef9dd9b387e3c",
  "_shrinkwrap": null,
  "_spec": "printj@~1.1.0",
  "_where": "E:\\codes\\Web\\CV-manager-app\\node_modules\\adler-32",
  "author": {
    "name": "sheetjs"
  },
  "bin": {
    "printj": "./bin/printj.njs"
  },
  "bugs": {
    "url": "https://github.com/SheetJS/printj/issues"
  },
  "config": {
    "blanket": {
      "pattern": "printj.js"
    }
  },
  "dependencies": {},
  "description": "Pure-JS printf",
  "devDependencies": {
    "@sheetjs/uglify-js": "~2.7.3",
    "@types/node": "^8.0.7",
    "blanket": "~1.2.3",
    "dtslint": "^0.1.2",
    "mocha": "~2.5.3",
    "typescript": "2.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-NbiNBOQ0GioHyeD3ni8wZB7ZmfU7mxIrqhWR5XSreX3rUVvk5UOwpzxOnWqrLdCtoBbdQ40sEwC+nXxxjlUo0A==",
    "shasum": "85487b5e8f96763b0b4a253613bef9dd9b387e3c",
    "tarball": "https://registry.npmjs.org/printj/-/printj-1.1.0.tgz"
  },
  "engines": {
    "node": ">=0.8"
  },
  "files": [
    "printj.js",
    "bin/printj.njs",
    "LICENSE",
    "README.md",
    "dist/*.js",
    "dist/*.map",
    "dist/LICENSE",
    "types/index.d.ts",
    "types/*.json"
  ],
  "gitHead": "d3f373079c848ab3934ba438c9fd40b365da2a7e",
  "homepage": "http://sheetjs.com/opensource",
  "keywords": [
    "printf",
    "sprintf",
    "format",
    "string"
  ],
  "license": "Apache-2.0",
  "main": "./printj",
  "maintainers": [
    {
      "name": "sheetjs",
      "email": "dev@sheetjs.com"
    }
  ],
  "name": "printj",
  "optionalDependencies": {},
  "readme": "# printj\n\nExtended `sprintf` implementation (for the browser and nodejs).  Emphasis on\ncompliance, performance and IE6+ support.\n\n```js\nPRINTJ.sprintf(\"Hello %s!\", \"World\");\n```\n\nA self-contained specification of the printf format string is included below in [this README](#printf-format-string-specification), as well as a summary of the\n[support against various printf implementations](#support-summary)\n\n\n## Installation\n\nWith [npm](https://www.npmjs.org/package/printj):\n\n```bash\n$ npm install printj\n```\n\nIn the browser:\n\n```html\n<script src=\"printj.js\"></script>\n```\n\nThe browser exposes a variable `PRINTJ`\n\nWhen installed globally, npm installs a script `printj` that renders the format\nstring with the given arguments.  Running the script with `-h` displays help.\n\nThe script will manipulate `module.exports` if available (e.g. in a CommonJS\n`require` context).  This is not always desirable.  To prevent the behavior,\ndefine `DO_NOT_EXPORT_PRINTJ`\n\n## Usage\n\nIn all cases, the relevant function takes a format and arguments to be rendered.\n\nThe return value is a JS string.\n\n- `PRINTJ.sprintf(format, ...args)` assumes the arguments are passed directly\n\n- `PRINTJ.vsprintf(format, argv)` assumes the arguments are passed in an array\n\nFor example:\n\n```js\n> // var PRINTJ = require('printj');       // uncomment this line if in node\n> var sprintf = PRINTJ.sprintf, vsprintf = PRINTJ.vsprintf;\n> sprintf(\"Hello %s\", \"SheetJS\")           // 'Hello SheetJS'\n> sprintf(\"%d + %d = %d\", 2,3,2+3)         // '2 + 3 = 5'\n> vsprintf(\"%d + %d = %d\", [2,3,5])        // '2 + 3 = 5'\n> sprintf(\"%1$02hhx %1$u %1$i %1$o\", -69)  // 'bb 4294967227 -69 37777777673'\n```\n\nThe command line script takes a format and arguments:\n\n```\nusage: printj [options] <format> [args...]\n\nOptions:\n    -h, --help      output usage information\n    -d, --dump      print debug information about format string\n\nArguments are treated as strings unless prefaced by a type indicator:\n    n:<integer>     call parseInt (ex. n:3 -> 3)\n    f:<float>       call parseFloat (ex. f:3.1 -> 3.1)\n    b:<boolean>     false when lowercase value is \"FALSE\" or \"0\", else true\n    s:<string>      interpret as string (ex. s:n:3 -> \"n:3\")\n    j:<JSON>        interpret as an object using JSON.parse\n    e:<JS>          evaluate argument (ex. e:1+1 -> 2, e:\"1\"+1 -> \"11\")\n\nsamples:\n    $ printj '|%02hhx%d|' n:50 e:0x7B                # |32123|\n    $ printj '|%2$d + %3$d is %1$d|' e:1+2 n:1 n:2   # |1 + 2 is 3|\n    $ printj '|%s is %s|' s:1+2 e:1+2                # |1+2 is 3|\n    $ printj '|%c %c|' s:69 n:69                     # |6 E|\n```\n\n## Testing\n\n`make test` will run the nodejs-based test.\n\n`make stress` will run a larger test encompassing every possible conversion.  It\nrequires access to a C compiler.\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\n## Badges\n\n[![Build Status](https://saucelabs.com/browser-matrix/printj.svg)](https://saucelabs.com/u/printj)\n\n[![Build Status](https://travis-ci.org/SheetJS/printj.svg?branch=master)](https://travis-ci.org/SheetJS/printj)\n\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/printj/master.svg)](https://coveralls.io/r/SheetJS/printj?branch=master)\n\n[![NPM Downloads](https://img.shields.io/npm/dt/printj.svg)](https://npmjs.org/package/printj)\n\n[![Dependencies Status](https://david-dm.org/sheetjs/printj/status.svg)](https://david-dm.org/sheetjs/printj)\n\n[![ghit.me](https://ghit.me/badge.svg?repo=sheetjs/printj)](https://ghit.me/repo/sheetjs/printj)\n\n[![Analytics](https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/printj?pixel)](https://github.com/SheetJS/printj)\n\n# printf format string specification\n\nThe `printf` family of functions attempt to generate and output a string of\ncharacters from a series of arguments, following a user-supplied \"format string\"\nspecification.  The format string contains normal characters that are written to\nthe output string as well as specifiers that describe which parameter to insert\nand how to render the parameter.  This specification describes how a conformant\nimplementation should process the format string and generate an output string.\nAny discrepancies between this document and the reference implementation are\nconsidered bugs in the implementation.\n\n### Original C Interface\n\nEvery function in the `printf` family follows the same logic to generate strings\nbut have different interfaces reflecting different input and output behaviors.\nSome functions have wide variants that use wide `wchar_t *` strings rather than\nnormal C `char *`.  The following variants are required by the POSIX spec:\n\n|  function  | max length |  output destination   | vintage |  wide ver  |\n|------------|------------|-----------------------|---------|------------|\n| `printf`   | unbounded  | standard output       | K&R     | `wprintf`  |\n| `fprintf`  | unbounded  | stream (`FILE *`)     | K&R     | `fwprintf` |\n| `sprintf`  | unbounded  | string (`char *`)     | K&R     | `swprintf` |\n| `snprintf` | parameter  | string (`char *`)     | C99     |            |\n| `dprintf`  | unbounded  | POSIX file descriptor | POSIX   |            |\n\nEach function has a dual function, whose name begins with `v`, that accepts the\nparameters as a `va_list` rather than formal parameters.  In all cases, they\nreturn the number of characters written or a negative value to indicate error:\n\n```C\nint   sprintf(char *ostr, const char *fmt, ...);\nint  vsprintf(char *ostr, const char *fmt, va_list arg_list);\n\nint  swprintf(wchar_t *ostr, const wchar_t *fmt, ...);\nint vswprintf(wchar_t *ostr, const wchar_t *fmt, va_list arg_list);\n```\n\n### JS and C strings\n\nC \"strings\" are really just arrays of numbers.  An external code page (such as\nASCII) maps those numbers to characters.  K&R defines two types of strings:\nbasic character set strings (`char *`) and extended character set strings\n(`wchar_t *`). In contrast, JS has a true string value type.\n\nUnlike in C, JS strings do not treat the null character as an end-of-string\nmarker.  As a result, characters beyond the first null character will be used.\n\nThe JS equivalent of a C extended string would be an array of the individual\ncharacter codes.  The C basic string equivalent would involve specifying a code\npage and mapping back.  The `codepage` JS library supports common codepages.\n\nWhile capturing the essence of C strings, using arrays of character codes is not\nidiomatic JS.  Few developers leverage this and the downsides far exceed the\nbenefits of a more direct translation.  The effect can be feigned, as shown in\nthe `js2c` code sample at the end of the document.\n\n### JS Interface\n\nIn the absence of a standard output or even a standard concept of a stream, the\nnon-string outputs are irrelevant.  Similarly there is no JS analogue of wide\ncharacters.  While useful, lack of direct memory management obviates `snprintf`.\nThis implementation exports the remaining functions, `sprintf` and `vsprintf`.\n\nInstead of replicating the original C signature and `errno`, functions directly\nreturn the output string and throw Errors:\n\n```typescript\nfunction  sprintf(fmt:string, ...args):string;\nfunction vsprintf(fmt:string, args:Array<any>):string;\n```\n\nThe C functions return the number of characters written to the string, which is\ndirectly accessible in JS via the `length` property.  A direct replica of the\nvarious string functions are included at the end of the document.\n\n## Specifier heritage and regular expression\n\nNote: The regular expressions follow perl `/x` style.  Whitespace characters\noutside of character classes are ignored.  `#` is a comment character and every\ncharacter until the end of the line is ignored.  To convert to a standard regex:\n\n```js\nregex_string.replace(/#.*$/gm,\"\").replace(/^\\s*/gm,\"\").replace(/\\s*\\n/gm,\"\");\n```\n\nBased on K&R, conversions originally followed the format:\n\n - required: leading `%`\n - optional: `-` (POSIX refers to this as the \"flags\")\n - optional: positive number or `*` (POSIX \"width\")\n - optional: period followed by positive number or `*` (POSIX \"precision\")\n - optional: an `h` or `l` to indicate size of data (POSIX \"length\")\n - required: character describing output behavior (POSIX \"conversion specifier\")\n\nThis is captured by the regular expression:\n\n```perl\n/%(?:\n    ([-])?                             # flags (only minus sign)\n    (\\d+|\\*)?                          # width\n    (?:\\.(\\d+|\\*))?                    # period + precision\n    ([hl])?                            # length\n    ([dioxXucsfeEgGp%])                # conversion specifier\n)/x\n```\n\nVarious implementations of `printf` have added different functionality.\n\nANSI standards up through C99:\n\n - more flags `\"+\"` `\" \"` `\"0\"` `\"#\"`\n - more lengths `\"L\"` `\"hh\"` `\"ll\"` `\"j\"` `\"z\"` `\"t\"`\n - more conversions `\"F\"` `\"a\"` `\"A\"` `\"n\"`\n\nThe POSIX specification of `printf` added:\n\n - positional parameters to identify argument indices\n - more flags `\"'\"`\n - more conversions `\"C\"` `\"S\"`\n - clarifications regarding corner cases and \"undefined behavior\"\n\nBSD implementations added:\n\n - more lengths `\"q\"`\n - more conversions `\"D\"` `\"U\"` `\"O\"`\n\nglibc (GNU) added:\n\n - more lengths `\"Z\"`\n - more conversions `\"m\"`\n\nWindows C Runtime (CRT) added:\n\n - more lengths `\"I\"` `\"I32\"` `\"I64\"` `\"w\"`\n\nglibc and CRT both added `Z`. glibc uses `Z` for the length `size_t`. CRT uses\n`Z` as a conversion for length-prefixed strings.  This implementation takes the\nformer approach, handling `Z` in the same way as `z`.\n\nBSD and IBM C library both added `D`.  BSD uses `D` as a conversion, namely as\nan alias of `ld`.  IBM uses `D` for the length for `_Decimal64`, a decimal\nfloating point type, in accordance with ISO/IEC TR 24732.  This implementation\ntakes the former approach.\n\nThis implementation also adds new conversions:\n\n - `\"b\"` and `\"B\"` for binary (base-2) integer renderings\n - `\"y\"` and `\"Y\"` for true/false and yes/no Boolean conversions\n - `\"J\"` for JSON\n - `\"T\"` and `\"V\"` for JS typeof and valueOf inspection\n\nCombining the various extensions yields the following regular expression:\n\n```perl\n/%(?:\n    %|                                  # literal %% (flags etc prohibited)\n    (\\d+\\$)?                            # positional parameter\n    ([-+ 0\\x23\\x27]*)?                  # flags\n    (\\d*|\\*(?:\\d+\\$)?)                  # width\n    (?:\\.(\\d+|\\*(?:\\d+\\$)?))?           # precision\n    (hh?|ll?|[LzjtqZIw])?               # length\n    ([diouxXfFeEgGaAcCsSpnDUOmbByYJVT]) # conversion specifier\n)/x\n```\nThis implementation explicitly does not support certain non-standard extensions:\n\n - AltiVec vector length extensions (`v` with `h`/`l`/`ll`):\n - CRT fixed width lengths `I32` and `I64`\n\n## Conversion Specifier Quick Reference Table\n\n|  C  |   Type   | Summary                                                     |\n|-----|:--------:|-------------------------------------------------------------|\n| `a` | floating | base-2 exp form w/ hex mantissa and dec exponent, lowercase |\n| `A` | floating | base-2 exp form w/ hex mantissa and dec exponent, uppercase |\n| `b` | extended | cast to C `unsigned int`,   standard form binary            |\n| `B` | extended | cast to C `unsigned long`,  standard form binary            |\n| `c` |   text   | print `latin-1` char from number OR first char of string    |\n| `C` |   text   | print `UCS-2`   char from number OR first char of string    |\n| `d` | integral | cast to C `int`,   standard form decimal                    |\n| `D` | integral | cast to C `long`,  standard form decimal                    |\n| `e` | floating | base-10 exp form w/dec mantissa and dec exponent, lowercase |\n| `E` | floating | base-10 exp form w/dec mantissa and dec exponent, uppercase |\n| `f` | floating | base-10 decimal form, lowercase extended values             |\n| `F` | floating | base-10 decimal form, uppercase extended values             |\n| `g` | floating | print using `e` or `f` conversion based on value/precision  |\n| `G` | floating | print using `E` or `F` conversion based on value/precision  |\n| `i` | integral | cast to C `int`,   standard form decimal (alias of `d`)     |\n| `J` | extended | prints objects using JSON or `util.inspect`                 |\n| `m` |   misc   | prints info about Error objects (JS equivalent of `errno`)  |\n| `n` |   misc   | do not print! stores number of chars written to arg `.len`  |\n| `o` | integral | cast to C `unsigned int`,   standard form octal             |\n| `O` | integral | cast to C `unsigned long`,  standard form octal             |\n| `p` |   misc   | print `\"l\"` field of object (fake pointer)                  |\n| `s` |   text   | print string argument                                       |\n| `S` |   text   | print string argument (alias of `\"s\"`)                      |\n| `T` | extended | print type information (`typeof` or `Object toString`)      |\n| `u` | integral | cast to C `unsigned int`,   standard form decimal           |\n| `U` | integral | cast to C `unsigned long`,  standard form decimal           |\n| `V` | extended | print primitive value (`valueOf`)                           |\n| `x` | integral | cast to C `unsigned int`,   standard form hex, lowercase    |\n| `X` | integral | cast to C `unsigned long`,  standard form hex, uppercase    |\n| `y` | extended | prints `true`/`false` or `yes`/`no` based on Boolean value  |\n| `Y` | extended | prints `TRUE`/`FALSE` or `YES`/`NO` based on Boolean value  |\n| `%` |   misc   | print the literal `%` character                             |\n\n## Parameter Selection\n\nThe default behavior is to consume arguments in order:\n\n```C\nprintf(\"Count to 3: %d %d %d\", 1, 2, 3); // Count to 3: 1 2 3\n```\n\nPOSIX `printf` permits explicit argument selection, bypassing the standard\nbehavior of using the arguments in order.  To select the `n`-th argument, use\n`n$` immediately after the `%` token to select an argument for the conversion:\n\n```C\nprintf(\"%d %d %d\",       1, 2, 3);        // 1 2 3 (implicit order 1, 2, 3 )\nprintf(\"%1$s %2$s %3$s\", \"a\", \"b\", \"c\");  // a b c (explicit order 1, 2, 3 )\nprintf(\"%1$s %3$s %2$s\", \"a\", \"b\", \"c\");  // a c b (explicit order 1, 3, 2 )\n```\n\nThe POSIX standard asserts that mixing positional and non-positional conversions\nis undefined behavior.  This implementation handles mixing by tracking the index\nfor non-positional conversions:\n\n```C\nprintf(\"%s %4$s %s %5$s %s\", \"a\", \"b\", \"c\", \"d\", \"e\"); // a d b e c\n```\n\nThe POSIX standard requires that if an argument is used in the format, every\npreceding argument must be used.  This implementation relaxes that requirement:\n\n```C\nprintf(\"%3$s\", \"a\", \"b\", \"c\"); // c (technically invalid since \"a\"/\"b\" unused)\n```\n\n## Dynamic Specifiers\n\nThe width and precision specifiers may include the dynamic specifier `*` which\ninstructs the engine to read the next argument (assumed to be an integer).  Just\nas with the positional parameter, `idx$` immediately after the `*` token selects\nthe numeric argument.\n\nFor example:\n\n```C\nprintf(\"|%5s|\", \"sheetjs\");               // |sheetjs|    (width = 5)\nprintf(\"|%*s|\", 5, \"sheetjs\");            // |sheetjs|    (width first argument)\nprintf(\"|%2$*1$s|\", 5, \"sheetjs\", 10);    // |sheetjs|    (width is argument #1)\n\nprintf(\"|%10s|\", \"sheetjs\");              // |   sheetjs| (width = 10)\nprintf(\"|%2$*3$s|\", 5, \"sheetjs\", 10);    // |   sheetjs| (width is argument #3)\n```\n\nArguments are generally consumed in order as presented in the format string:\n\n```C\nprintf(\"|%s|\", val);\nprintf(\"|%*s|\", width, val);\nprintf(\"|%.*s|\", prec, val);\nprintf(\"|%*.*s|\", width, prec, val);\nprintf(\"|%0*.*d|\", 4, 2, 1);  // |  01| width=4 prec=2 value=1\n```\n\nPositional arguments can be applied to width and precision:\n\n```C\nprintf(\"|%*.*d|\", width, prec, val);\nprintf(\"|%2$0*3$.*1$d|\", prec, val, width);\nprintf(\"|%0*.*d|\", 4, 2, 1);        // |  01| width=4 prec=2 value=1 flags='0'\nprintf(\"|%1$0*3$.*2$d|\", 1, 2, 4);  // |  01| width=4 prec=2 value=1 flags='0'\n```\n\nA negative width is interpreted as the `-` flag with a positive width:\n\n```C\nprintf(\"|%*.*d|\",   4, 2, 1);        // |  01| width=4 prec=2 value=1 flags=''\nprintf(\"|%-*.*d|\",  4, 2, 1);        // |01  | width=4 prec=2 value=1 flags='-'\nprintf(\"|%*.*d|\",  -4, 2, 1);        // |01  | width=4 prec=2 value=1 flags='-'\nprintf(\"|%-*.*d|\", -4, 2, 1);        // |01  | width=4 prec=2 value=1 flags='-'\n```\n\nA negative precision is discarded:\n\n```C\nprintf(\"|%*s|\", 4, \"sheetjs\");       // |sheetjs|  width=4\nprintf(\"|%*.*s|\", 4,  3, \"sheetjs\"); // | she|     width=4 prec=3\nprintf(\"|%*.*s|\", 4,  2, \"sheetjs\"); // |  sh|     width=4 prec=2\nprintf(\"|%*.*s|\", 4,  1, \"sheetjs\"); // |   s|     width=4 prec=1\nprintf(\"|%*.*s|\", 4,  0, \"sheetjs\"); // |    |     width=4 prec=0\nprintf(\"|%*.*s|\", 4, -1, \"sheetjs\"); // |sheetjs|  width=4 (prec ignored)\n```\n\n\n# C Data Model\n\nJS has one numeric type `Number` which represents an IEEE754 double-precision\n(64-bit) floating point number.  C has a multitude of numeric types, including\nfloating point as well as integer types.  The sizes of those data types are\nimplementation-dependent.  A \"C data model\" specifies the sizes of the core C\ndata types.\n\n### Integer Types\n\nPOSIX `printf` specification references 8 integer types in integer conversions:\n\n| C data type |  fmt  | unsigned type        |  fmt  | signed type   |  fmt  |\n|-------------|------:|----------------------|------:|---------------|------:|\n| `char`      |       | `unsigned char`      | `hhu` | `signed char` | `hhd` |\n| `short`     |  `hd` | `unsigned short`     |  `hu` |               |       |\n| `int`       |   `d` | `unsigned int`       |   `u` |               |       |\n| `long`      |  `ld` | `unsigned long`      |  `lu` |               |       |\n| `long long` | `lld` | `unsigned long long` | `llu` |               |       |\n| `size_t`    |  `zu` |                      |       | `ssize_t`     |  `zd` |\n| `intmax_t`  |  `jd` | `uintmax_t`          |  `ju` |               |       |\n| `ptrdiff_t` |  `td` |                      |       |               |       |\n\nC99 does not officially define a signed `size_t` or unsigned `ptrdiff_t` type.\nPOSIX does define `ssize_t` but no equivalent `uptrdiff_t`.\n\nBSD additionally recognizes the types `quad_t` and `u_quad_t`, which this\nimplementation treats as `long long int` and `unsigned long long int`.\n\n### Character and String Types\n\nTwo integer types are used in character and string conversions:\n\n| type        |  fmt  |\n|-------------|------:|\n| `wchar_t`   |  `ls` |\n| `wint_t`    |  `lc` |\n\nBoth wide types `wchar_t` and `wint_t` can be signed or unsigned according to\nC99.  Both types are used only in character and string conversions.  Based on\nK&R \"printable characters are always positive\", the types are assumed unsigned.\n\n### Floating Point Number Types\n\nK&R recognizes 3 floating point types.  C99 later tied it to IEC 60559:\n\n|  C data type  | precision | total bits | exponent | mantissa |  fmt  |\n|:--------------|:----------|:----------:|:--------:|:--------:|------:|\n| `float`       | single    |    `32`    |    `8`   |   `23`   |       |\n| `double`      | double    |    `64`    |   `11`   |   `52`   |   `f` |\n| `long double` | extended  |    `80`    |   `15`   |   `64`   |  `Lf` |\n\n## Implementation\n\nNumerous \"C data models\", specifying the bit/byte sizes of the various types,\nhave been and continue to be used.  For example, OSX and other modern 64-bit\nUNIX flavors use the \"LP64\" C data model.  64-bit Windows currently uses the\n\"LLP64\" model.  32-bit systems generally use the \"ILP32\" model.  The 8-bit byte\nsizes for the various types under the various models are defined in ctypes.json\nin the `Models` object as per the following table:\n\n| type        | ctypes.json | LP64 | ILP32 | LLP64 |\n|-------------|-------------|-----:|------:|------:|\n| `char`      | `char`      |   1  |    1  |    1  |\n| `short`     | `short`     |   2  |    2  |    2  |\n| `int`       | `int`       |   4  |    4  |    4  |\n| `long`      | `long`      |   8  |    4  |    4  |\n| `long long` | `longlong`  |   8  |    8  |    8  |\n| `wchar_t`   | `wchar_t`   |   4  |    4  |    2  |\n| `wint_t`    | `wint_t`    |   4  |    4  |    2  |\n| `size_t`    | `size_t`    |   8  |    4  |    8  |\n| `intmax_t`  | `intmax_t`  |   8  |    8  |    8  |\n| `ptrdiff_t` | `ptrdiff_t` |   8  |    4  |    8  |\n\nBy default the source assumes the LP64 data model.  Other data models are\nsupported in the source tree, controlled by the JSFLAGS variable in the build\nprocess.  Set the `JS_MODEL` variable to the desired index as specified in the\n`ModelNames` array in `bits/ctype.json`:\n\n```bash\n$ <bits/ctypes.json jq -r '.ModelNames|.[]'  # LP64 ILP32 LLP64\n$ JSFLAGS=-DJS_MODEL=0 make                  # LP64\n$ JSFLAGS=-DJS_MODEL=1 make                  # ILP32\n$ JSFLAGS=-DJS_MODEL=2 make                  # LLP64\n```\n\nTo create a custom model, add the spec to `bits/ctypes.json` by appending the\nmodel name to the end of the `ModelNames` array and adding an entry to the\n`Models` object.  The current models are defined as follows:\n\n```json\n{\n  \"ModelNames\":[\"LP64\", \"ILP32\", \"LLP64\"],\n  \"Models\": {\n    \"LP64\":  { \"char\":1, \"short\":2, \"int\":4, \"long\":8, \"longlong\":8, \"wint_t\":4, \"wchar_t\":4, \"size_t\":8, \"intmax_t\":8, \"ptrdiff_t\":8 },\n    \"ILP32\": { \"char\":1, \"short\":2, \"int\":4, \"long\":4, \"longlong\":8, \"wint_t\":4, \"wchar_t\":4, \"size_t\":4, \"intmax_t\":8, \"ptrdiff_t\":4 },\n    \"LLP64\": { \"char\":1, \"short\":2, \"int\":4, \"long\":4, \"longlong\":8, \"wint_t\":2, \"wchar_t\":2, \"size_t\":8, \"intmax_t\":8, \"ptrdiff_t\":8 }\n  }\n}\n```\n\n# Integer Conversions\n\nThis section covers the conversions `diouxXDUO`.  The base-2 conversions `bB`\nare an extension and are discussed at the end, but the same basic rules apply.\n\nJS has one Number type (representing an IEEE754 8-byte floating point number)\nthat is capable of representing a 32-bit integer.  It cannot represent the full\nrange of 64-bit integers exactly.  Care is taken to avoid operations that may\ninadvertently result in a conversion to a smaller integral type.\n\n## Restricting Integer Values\n\nJS Bitwise operations convert numbers to 32-bit integers before performing\noperations.  With the exception of the unsigned right shift operator `>>>`, all\noperations act on signed integers.  For example:\n\n```js\nMath.pow(2,31) | 0;        // -2147483648 == -Math.pow(2,31)\n(Math.pow(2,32)-2) ^ 0;    // -2\n-1 >>> 0                   // 4294967295 == Math.pow(2,32) - 1\n```\n\nJS Number can exactly represent every integer in the range `-2^53 .. 2^53`.  For\nlengths exceeding 32 bits, `Math.round` is appropriate.\n\n| bits | unsigned                  | signed                                    |\n|------|---------------------------|-------------------------------------------|\n| 8    | `V & 0xFF`                | `V &= 0xFF; if(V > 0x7F) V-= 0x100`       |\n| 16   | `V & 0xFFFF`              | `V &= 0xFFFF; if(V > 0x7FFF) V-= 0x10000` |\n| 32   | `V >>> 0`                 | `V | 0`                                   |\n| 64   | `Math.abs(Math.round(V))` | `Math.round(V)`                           |\n\n## Length Specifiers for Integer Conversions\n\nWhen a length specifier implies a certain size (such as `hh` for a single-byte\ninteger), the number will be converted before rendering strings.  For example:\n\n```C\nprintf(\"%1$02hhx %1$02hx %1$02lx %1$02llx\", 256);       // |00 100 100 100|\nprintf(\"%1$02hhx %1$02hx %1$02lx %1$02llx\", 4096);      // |00 1000 1000 1000|\nprintf(\"%1$02hhx %1$02hx %1$02lx %1$02llx\", 65536);     // |00 00 10000 10000|\n```\n\nValues are restricted by first limiting the result to a specified number of\nbytes (appropriate bit-and) and then adding or subtracting to ensure the value\nis signed or unsigned according to the conversion specifier.  If a length is\nspecified, it overrides the implied length of the conversion.  The following\ntable describes the behavior of this implementation:\n\n| implied C type                      | ctypes.json | length | conv default |\n|:------------------------------------|:------------|:------:|:-------------|\n| `int` or `unsigned int`             | `int`       | (none) | d i o u x X  |\n| `char` or `unsigned char`           | `char`      |   hh   |\n| `short` or `unsigned short`         | `short`     |    h   |\n| `long` or `unsigned long`           | `long`      |    l   | D U O        |\n| `long long` or `unsigned long long` | `longlong`  | L ll q |\n| `intmax_t` or `uintmax_t`           | `intmax_t`  |    j   |\n| `size_t` or `ssize_t`               | `size_t`    |   z Z  |\n| `ptrdiff_t` or unsigned variant     | `ptrdiff_t` |    t   |\n\n## Rendering Unsigned Integers in Base 10 (\"u\" and \"U\" conversions)\n\n`num.toString(10)` produces the correct result for exact integers.\n\n`\"u\"` conversion restricts values to `int`; `\"U\"` restricts to `long`.\n\n## Rendering Unsigned Integers in Base 8 (\"o\" and \"O\" conversions)\n\nEven though `num.toString(8)` is implementation-dependent, all browser\nimplementations use standard form for integers in the exact range.\n\nThe alternate form (`#`) prints a `\"0\"` prefix.\n\n`\"o\"` conversion restricts values to `int`; `\"O\"` restricts to `long`.\n\n## Rendering Unsigned Integers in Base 16 (\"x\" and \"X\" conversions)\n\nEven though `num.toString(16)` is implementation-dependent, all browser\nimplementations use standard form for integers in the exact range.\n\nThe alternate form (`#`) prints a `\"0x\"` or `\"0X\"` prefix.\n\nUnlike `\"U\" \"O\" \"D\"`, `\"X\"` conversion uses `A-F` instead of `a-f` in hex.\n\n## Rendering Signed Integers in Base 10 (\"d\" \"i\" and \"D\" conversions)\n\n`num.toString(10)` produces the correct result for exact integers.  The flags\n`\" +\"` control prefixes for positive integers.\n\n`\"di\"` conversions restrict values to `int`; `\"D\"` restricts to `long`.\n\n\n# Floating Point Conversions\n\nThis section covers the conversions `fFeEgGaA`.\n\nDue to C variadic argument promotion rules, `float` types are always promoted to\n`double`.  None of the conversions or length specifiers signal that an argument\nis to be interpreted as a `float`.  There is no JS canonical representation of\nan extended floating point number, so JS `Number` suffices.\n\n## Infinity, NaN, and Negative Zero\n\nJS recognizes a few special IEEE754 values, as described in the following table:\n\n|   JS value  | JS Expression | Description                                    |\n|------------:|:--------------|:-----------------------------------------------|\n|  `Infinity` | `1./0.`       | Positive limiting value `lim{x->0+} 1/x`       |\n| `-Infinity` | `-1./0.`      | Negative limiting value `lim{x->0+} -1/x`      |\n|       `NaN` | `0./0.`       | Placeholder for \"not-a-number\" e.g. `0./0.`    |\n|       `-0.` | `-1/Infinity` | Negative limiting value `lim{x->0-} x`         |\n\nJS `Number` methods render different strings from the POSIX spec:\n\n|   JS value  | POSIX string                                  | JS string     |\n|------------:|:----------------------------------------------|--------------:|\n|  `Infinity` |  `\"inf\"  \"INF\"` or  `\"infinity\"  \"INFINITY\"`  |  `\"Infinity\"` |\n| `-Infinity` | `\"-inf\" \"-INF\"` or `\"-infinity\" \"-INFINITY\"`  | `\"-Infinity\"` |\n|       `NaN` | `\"[-]nan\" \"[-]NAN\"` w/opt parenthesized chars |       `\"NaN\"` |\n|       `-0.` | uses negative sign (e.g. `\"-0\"` under `\"%f\"`) | same as `+0.` |\n\nThis implementation performs the required adjustments.\n\n## Exponential Form (\"e\" and \"E\" conversions)\n\nAside from the special cases discussed above, JS `num.toExponential(prec)`\ndiffers from POSIX `printf(\"%1$.*2$e\", num, prec)` in the exponent field: JS\nwrites exponents with the fewest digits (POSIX requires 2+ digits).  This is\neasily fixed by inspecting the output string and inserting a \"0\" when needed.\n\nThe optional `#` flag forces the decimal point to appear when precision is 0.\nThis is also easily corrected by adding a decimal point just before the \"e\".\n\n## Standard Form (\"f\" and \"F\" conversions)\n\nThe POSIX spec only requires that the number of digits after the decimal point\nis equal to the precision.  It does not specify how many digits appear before\nthe decimal point, nor does it specify how to handle numbers that cannot be\nexactly represented.\n\nFor values less than `1e21` the JS `num.toFixed(n)` generally matches `%f` with\nthe specified precision.  However, for larger values `toFixed` defaults to the\nexponential form.\n\n## Value-dependent Form (\"g\" and \"G\" conversions)\n\nThe final form (exponential or standard) is determined based on the value.  The\nthreshold is different from the JS `toString` / `toPrecision` thresholds and\ndepends on the specified precision as well as the base-10 exponent:\n\n|   Value   |  `\"%.3g\"`  | `toPrecision(3)` |\n|----------:|:-----------|:-----------------|\n| 1.2345e-4 | `0.000123` | `0.000123`       |\n| 1.2345e-5 | `1.23e-05` | `0.0000123`      |\n| 1.2345e-6 | `1.23e-06` | `0.00000123`     |\n| 1.2345e-7 | `1.23e-07` | `1.23e-7`        |\n\nAccording to JS spec, `toPrecision` uses standard form when `precision > E` and\n`E >= -6`.  For printf standard form is used when `precision > E` and `E >= -4`.\n\n## Hex-Mantissa Decimal-Binary-Exponent Form (\"a\" and \"A\" conversions)\n\nA general exponential form involves 3 parameters: radix of the mantissa, base of\nthe exponent expression, and radix of the exponent expression.  The standard\nexponential form uses decimal for all three parts.  For base 16, there are quite\na few reasonable combinations.  Consider the value `1.234567e-80`:\n\n| Mant | Exp Base | Radix-10 (sigil `\";\"`) | Radix-16 (sigil `\";\"`) |\n|:----:|:--------:|:-----------------------|:-----------------------|\n|  10  |    10    | `1.234567;-80`         | `1.234567;-50`         |\n|  16  |    10    | `1.3c0c9539b8887;-80`  | `1.3c0c9539b8887;-50`  |\n|  16  |    16    | `5.daf8c8f5f4104;-67`  | `5.daf8c8f5f4104;-43`  |\n|  16  |     4    | `1.76be323d7d041;-133` | `1.76be323d7d041;-85`  |\n|  16  |     2    | `1.76be323d7d041;-266` | `1.76be323d7d041;-10a` |\n\nPOSIX `\"%a\"` uses a hex mantissa (16), decimal exponent radix (10), and binary\nexponent base (2).  The general normalized form requires that the integral part\nof the mantissa to exceed 0 and not to exceed `exponent base - 1` except in the\nspecial case of `0`.  The sigil is `p` and exponent sign is always used.\n\nJS `num.toString(radix)` is implementation-dependent for valid non-10 radices\n(`2-9, 11-36`).  IE uses hex-mantissa decimal-hex-exponent form when the\nabsolute value of the base-2 exponent exceeds 60.  Otherwise, IE uses an exact\nstandard hexadecimal form.  Chrome, Safari and other browsers always use the\nexact standard hexadecimal form.  Both forms are easily converted to `\"%a\"` by\ncalculating and dividing by the appropriate power of 2.\n\nFor each non-zero normal floating point value, there are 4 acceptable strings\nthat represent the value, derived by multiplying the normalized value by powers\nof 2 and adjusting the exponent accordingly:\n\n| Value   | Normalized     | Alternate `*2` | Alternate `*4` | Alternate `*8` |\n|:--------|:---------------|:---------------|:---------------|:---------------|\n| `1`     | `1p+0`         | `2p-1`         | `4p-2`         | `8p-3`         |\n| `.2`    | `1.9999999p-3` | `3.3333333p-4` | `6.6666666p-5` | `c.cccccccp-6` |\n| `.69`   | `1.6147ae1p-1` | `2.c28f5c2p-2` | `5.851eb85p-3` | `b.0a3d70ap-4` |\n| `6.e20` | `1.043561p+69` | `2.086ac3p+68` | `4.10d586p+67` | `8.21ab0dp+66` |\n\nJS engines follow the glibc model: multiply by a suitable power of 16 so that\nthe mantissa is between 1 and 16, render left to right one digit at a time, then\nfix the result at the end.  FreeBSD and OSX always show the normalized form.\nThis implementation defaults to the normalized form.  To switch to the glibc\nform, define `DO_NOT_NORMALIZE` in the `JSFLAGS` variable when building:\n\n```bash\n$ JSFLAGS=-DDO_NOT_NORMALIZE make\n```\n\n# Character Conversions\n\nThis section covers the conversions `sScC`.\n\n## Rendering Strings (\"s\" and \"S\" conversions)\n\nJS has no concept of \"wide strings\" (`wchar_t *` in C), so the length modifiers\nare ignored.  `s` and `S` are treated as equivalent.\n\nArguments are first interpreted as strings by calling the `String` function.\nImplementing `toString` on the argument to be converted may lead to unexpected\nresults:\n\n```C\nvar O = {valueOf:function() {return 456;}, toString:function() {return \"123\"}};\nprintf(\"%1$s %1$d\", O); // \"123 456\"\n```\n\nIf a positive precision is specified, up to that many characters will be taken\nfrom the string.  Otherwise the entire string will be used:\n\n```C\nprintf(\"|%s|\", \"sheetjs\");    // '|sheetjs|' (no precision)\nprintf(\"|%.9s|\", \"sheetjs\");  // '|sheetjs|' (string shorter than precision)\nprintf(\"|%.5s|\", \"sheetjs\");  // '|sheet|'   (string truncated)\n```\n\nLengths are measured using the JS string length accessor.  Since there is no\nattempt to correct for multi-character sequences like combining marks, the\nresults may be unexpected:\n\n```C\nprintf(\"%.1s\",\"ñ\");  // 'n' not \"ñ\"\n```\n\nIf the width is specified and is greater than the width of the string to be\nrendered, padding will be applied.  If the `\"-\"` flag is specified, then the\nstring will be right-padded, otherwise it will be left-padded.  If the `\"0\"`\nflag is specified, the final string is left-padded with zeroes. The `\"-\"` flag\ntakes precedence over `0`.\n\n```C\nprintf(   \"|%s|\", \"sheetjs\");   // '|sheetjs|'   (no width)\nprintf(  \"|%5s|\", \"sheetjs\");   // '|sheetjs|'   (string longer than width)\nprintf(  \"|%9s|\", \"sheetjs\");   // '|  sheetjs|' (no flag = left pad spaces)\nprintf( \"|%09s|\", \"sheetjs\");   // '|00sheetjs|' (\"0\" = left pad \"0\")\nprintf( \"|%-9s|\", \"sheetjs\");   // '|sheetjs  |' (\"-\" = right pad space)\nprintf(\"|%-09s|\", \"sheetjs\");   // '|sheetjs  |' (\"0\" ignored)\n```\n\n## Rendering Characters (\"c\" and \"C\" conversions)\n\nJS has no concept of \"wide characters\" (`wchar_t` in C).  The length modifier is\nused in determining whether the number should be interpreted as one or two\n16-bit character codes (when the \"C\" format or the \"l\" or \"ll\" specifiers are\nused) or a single 8-bit char code.  Precision and flags are ignored.\n\n# Non-Numeric Conversions\n\n## The literal \"%\" symbol (\"%\" conversion)\n\nAll other parameters are ignored.\n\n## Interpreting and Rendering Pointers (\"p\" conversion)\n\nJS has no true concept of pointers.  In array and typed array contexts, it is\ncommon to associate a position object that stores the address relative to the\nstart of the array.  This implementation reads the `l` key and interprets as a\n32-bit or 52-bit unsigned integer depending on `size_t` in the data model.\n\nThe normal output format is equivalent to `\"%#x\"` but the alternate form emits\nusing the `\"%d\"` format.  When the pointer is invalid, `-1` is rendered.  Only\nthe `\"#\"` flag is interpreted.\n\n```js\nvar x = {}, y = {l:3};\nprintf(\"%1$p %1$#p\", y); // 0x3 3\nprintf(\"%1$p %1$#p\", x); // 0xFFFFFFFF -1\n```\n\n## Extracting length of a partial conversion (\"n\" conversion)\n\nC `printf` permits a special `n` conversion which interprets the argument as an\nintegral pointer (interpreted size controlled by the length specifier) and\nwrites the number of characters printed to that pointer.\n\nJS has no true concept of pointers in the C sense.  The library works around\nthe limitation by interpreting the argument as an object and assigning to the\n`len` key.  The conversion does not write any characters to the output string:\n\n```js\nvar x = {};\nprintf(\"%1$s %2$J%2$n abc\", \"foo\", x); // \"foo {} abc\", also sets x.len = 6\n//     |........|                         |......|  (6 chars at that point)\n```\n\nThis implementation mutates the object while processing:\n\n```js\nvar x = {};\nprintf(\"%1$s %2$J%2$n %3$s %2$J\", \"foo\", x, \"bar\"); // 'foo {} bar {\"len\":6}'\n```\n\n## Error messages (\"m\" conversion)\n\nglibc supports an `m` conversion that does not consume arguments.  It renders\nthe string `strerror(errno)` where `strerror` is the libc function and `errno`\nis the global error number.\n\nJS has no equivalent of `errno` and no standard JS runtime exposes a similar\nglobal error variable, so `%m` will write the default message `\"Success\"`.  A\npositional parameter or `#` flag changes the behavior:\n\n|     form     | position | behavior                              |\n|:------------:|:--------:|---------------------------------------|\n|     main     |    no    | do not read argument, emit \"Success\"  |\n| alt (flag #) |    no    | read and process next argument        |\n| main or alt  |   yes    | read and process specified argument   |\n\nIn all forms other than `\"%m\"`, an argument will be processed as follows:\n\n- If the argument is not an instance of an `Error`, emit \"Success\"\n- If the `message` field is set, emit the error message.\n- If the `errno` field is set, emit \"Error number \" followed by the errno\n- Otherwise emit \"Error \" followed by the error interpreted as a String\n\n```\nvar x = new Error(\"sheetjs\");\nx.errno = 69; x.toString = function() { return \"SHEETJS\"; };\nprintf(\"|%#m|\", x);      // |sheetjs|\ndelete x.message;\nprintf(\"|%#m|\", x);      // |Error number 69|\ndelete x.errno;\nprintf(\"|%#m|\", x);      // |Error SHEETJS|\n```\n\n# Extensions\n\nThese additional conversions take advantage of unused format characters:\n\n## Rendering Boolean Values (\"y\" and \"Y\" conversions)\n\nValues are converted to Boolean and tested for truthiness.  The `Y` rendering\nis the uppercase version of the equivalent rendering with format `y`.\n\n\n|     form     | truthy value  `y` (`Y`) | falsy value `y` (`Y`) |\n|:------------:|:-----------------------:|:---------------------:|\n|     main     |     `true` (`TRUE`)     |   `false` (`FALSE`)   |\n| alt (flag #) |      `yes` (`YES`)      |      `no` (`NO`)      |\n\nWidth and precision are applied in the same manner as the `s` conversion.\n\n```js\nprintf(\"|%1$y|%2$Y|%1$#Y|%2$#y|%2$.1y|\", 1, 0); // |true|FALSE|YES|no|f|\nprintf(\"|%05.2Y|%-5.2y|\", 1, 0);  // |000TR|fa   |\n```\n\n## Rendering JSON (\"J\" conversion)\n\nThe default rendering is the standard output from `JSON.stringify`.  Alternate\nform (`\"#\"` flag) renders using `util.inspect` if available.\n\n```js\nvar x = {\n  a: [1,[2,3,4],5,6,7],\n  b: {\n    c: {\n      d: { e:\"f\" },\n      g:\"h\",\n      i:\"j\"\n    },\n    k:\"l\",\n    m:\"n\",\n    o:\"p\"},\n  q: \"r\"\n};\nprintf(\"%J\", x) // '{\"a\":[1,[2,3,4],5,6,7],\"b\":{\"c\":{\"d\":{\"e\":\"f\"}, ..(ctnd)..\nprintf(\"%#J\", x) // '{ a: [ 1, [ 2, 3, 4 ], 5, 6, 7 ],\\n  b: { c: { ..(ctnd)..\n```\n\nWidth, precision and other flags are ignored.\n\n## JS typeof and valueOf (\"T\" and \"V\" conversion)\n\nUnder the \"T\" conversion, the result of `typeof arg` is rendered.  If the `#`\nflag is specified, the type is derived from `Object.prototype.toString`:\n\n```\nprintf(\"%1$T %1$#T\", 1);          // 'number Number'\nprintf(\"%1$T %1$#T\", 'foo');      // 'string String'\nprintf(\"%1$T %1$#T\", [1,2,3]);    // 'object Array'\nprintf(\"%1$T %1$#T\", null);       // 'object Null'\nprintf(\"%1$T %1$#T\", undefined);  // 'undefined Undefined'\n```\n\nUnder the \"V\" conversion, the result of `arg.valueOf()` is rendered:\n\n```\nvar _f = function() { return \"f\"; };\nvar _3 = function() { return 3; };\nprintf(\"%1$d %1$s %1$V\", {toString:_f});               // '0 f f'\nprintf(\"%1$d %1$s %1$V\", {valueOf:_3});                // '3 [object Object] 3'\nprintf(\"%1$d %1$s %1$V\", {valueOf:_3, toString:_f});   // '3 f 3'\n```\n\n## Rendering Unsigned Integers in Base 2 (\"b\" and \"B\" conversions)\n\nThe implementation is similar to the octal `\"o\"` and `\"O\"` conversions, except\nfor the radix (2 for `\"b\"` and `\"B\"`) and the alternate-form prefix (`\"0b\"`)\n\n# Miscellaneous Notes\n\n## Format Characters\n\nFor compatibility purposes, format characters must be printable ASCII characters\n(ASCII codes `0x20 - 0x7E`).  The 95 eligible characters are listed below:\n\n|  C  |    Type    |  C  |    Type    |  C  |    Type    |  C  |    Type    |\n|-----|:----------:|-----|:----------:|-----|:----------:|-----|:----------:|\n| `a` | conversion | `A` | conversion | ` ` |    flag    | `!` |            |\n| `b` | conversion | `B` | conversion | `\"` |            | `#` |    flag    |\n| `c` | conversion | `C` | conversion | `$` |    other   | `%` | conversion |\n| `d` | conversion | `D` | conversion | `&` |            | `'` |    flag    |\n| `e` | conversion | `E` | conversion | `(` |            | `)` |            |\n| `f` | conversion | `F` | conversion | `*` |    other   | `+` |    flag    |\n| `g` | conversion | `G` | conversion | `,` |            | `-` |    flag    |\n| `h` |   length   | `H` |            | `.` |    other   | `/` |            |\n| `i` | conversion | `I` |   length   | `0` |    digit   | `1` |    digit   |\n| `j` |   length   | `J` | conversion | `2` |    digit   | `3` |    digit   |\n| `k` |            | `K` |            | `4` |    digit   | `5` |    digit   |\n| `l` |   length   | `L` |   length   | `6` |    digit   | `7` |    digit   |\n| `m` | conversion | `M` |            | `8` |    digit   | `9` |    digit   |\n| `n` | conversion | `N` |            | `:` |            | `;` |            |\n| `o` | conversion | `O` | conversion | `<` |            | `=` |            |\n| `p` | conversion | `P` |            | `>` |            | `?` |            |\n| `q` |   length   | `Q` |            | `@` |            | `[` |            |\n| `r` |            | `R` |            | `\\` |            | `]` |            |\n| `s` | conversion | `S` | conversion | `^` |            | `_` |            |\n| `t` |   length   | `T` | conversion | `~` |            | `{` |            |\n| `u` | conversion | `U` | conversion | `|` |            | `}` |            |\n| `v` |            | `V` | conversion | `` ` `` |        |\n| `w` |   length   | `W` |            |\n| `x` | conversion | `X` | conversion |\n| `y` | conversion | `Y` | conversion |\n| `z` |   length   | `Z` |   length   |\n\n## JS and C strings\n\nC provides no guidance on the actual character set.  According to K&R all valid\ncharacters in source code must be in a character set that is a subset of the\n7-bit ASCII set.  This implementation falls back on the UTF-16 base required by\nJS.  When converting C literal strings, there are a few differences in escaping:\n\n| C escape sequence | Equivalent JS | Notes                                  |\n|:------------------|:--------------|:---------------------------------------|\n| `\"\\a\"`            |  `\"\\007\"`     | BEL character will not ring in browser |\n| `\"\\?\"`            |  `\"?\"`        | JS does not handle trigraphs           |\n| `\"\\ooo\"` (octal)  |  `\"\\ooo\"`     | JS uses Latin-1 for non-ASCII codes    |\n| `\"\\xhh\"` (hex)    |  `\"\\xhh\"`     | JS uses Latin-1 for non-ASCII codes    |\n\n## Browser Deviations\n\nOpera does not always include the last significant digit in base 16 rendering.\nFor example, `(-6.9e-11).toString(16)` is `\"0.000000004bddc5fd160168\"` in every\nother browser but is `\"0.000000004bddc5fd16017\"` in Opera.  The test suite skips\nthe `%a/%A` precision-less formats in Opera.\n\n`Object.prototype.toString.call` gives unexpected results in older browsers, and\nno attempt is made to correct for them.  The test suite ignores those cases:\n\n| value       | `%#T` expected | `%#T` IE < 9 | `%#T` Android < 4.4 |\n|:------------|:---------------|:-------------|:--------------------|\n| `null`      | `\"Null\"`       | `\"Object\"`   | `\"global\"`          |\n| `undefined` | `\"Undefined\"`  | `\"Object\"`   | `\"global\"`          |\n\n## Support Summary\n\n- Full [POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html) conversion support with extensions!\n  [Conversion Specifier Table](#conversion-specifier-quick-reference-table)\n- Full support for POSIX flags and positional parameters\n- Emulation of BSD `quad_t` and `u_quad_t` conversion\n- Parser accepts but does not emulate CRT wide and unicode character conversions\n- glibc `Z` length conversion and extended `m` error support\n- Parser fails on CRT `I32`/`I64` fixed lengths\n- Default `LP64` data model but can be configured to support `ILP32` or `LLP64`\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/printj.git"
  },
  "scripts": {
    "dtslint": "dtslint types",
    "test": "make test"
  },
  "types": "types",
  "version": "1.1.0"
}
